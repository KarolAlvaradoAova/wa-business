// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo para almacenar contactos de WhatsApp
model Contact {
  id            String   @id @default(cuid())
  waId          String   @unique // WhatsApp ID (número de teléfono)
  name          String?  // Nombre del contacto
  displayName   String?  // Nombre personalizado/alias
  profilePic    String?  // URL de la foto de perfil
  phone         String?  // Número formateado para mostrar
  email         String?  // Email del contacto
  notes         String?  // Notas sobre el contacto
  isBlocked     Boolean  @default(false)
  isArchived    Boolean  @default(false)
  isFavorite    Boolean  @default(false)
  lastSeenAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  conversations Conversation[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  tags             ContactTag[]

  @@map("contacts")
}

// Modelo para etiquetas/tags
model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String   @default("#3b82f6") // Color hex para la etiqueta
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  contacts ContactTag[]

  @@map("tags")
}

// Tabla de relación many-to-many entre Contact y Tag
model ContactTag {
  id        String   @id @default(cuid())
  contactId String
  tagId     String
  createdAt DateTime @default(now())

  // Relaciones
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([contactId, tagId])
  @@map("contact_tags")
}

// Modelo para conversaciones (chats)
model Conversation {
  id            String   @id @default(cuid())
  contactId     String
  lastMessageId String?  @unique
  unreadCount   Int      @default(0)
  isPinned      Boolean  @default(false)
  isArchived    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  messages    Message[]
  lastMessage Message? @relation("ConversationLastMessage", fields: [lastMessageId], references: [id])

  @@map("conversations")
}

// Modelo para mensajes
model Message {
  id              String      @id @default(cuid())
  waMessageId     String?     @unique // ID del mensaje de WhatsApp
  conversationId  String
  senderId        String?     // ID del contacto que envió (null si somos nosotros)
  receiverId      String?     // ID del contacto que recibe (null si somos nosotros)
  content         String      // Contenido del mensaje
  messageType     MessageType @default(TEXT)
  mediaUrl        String?     // URL del archivo multimedia
  mediaCaption    String?     // Caption para multimedia
  status          MessageStatus @default(SENT)
  timestamp       DateTime    @default(now())
  isFromUs        Boolean     @default(false) // true si enviamos nosotros
  isRead          Boolean     @default(false)
  isDelivered     Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relaciones
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       Contact?     @relation("MessageSender", fields: [senderId], references: [id])
  receiver     Contact?     @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  // Relación inversa para lastMessage
  conversationAsLast Conversation? @relation("ConversationLastMessage")

  @@map("messages")
}

// Enums
enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  STICKER
  LOCATION
  CONTACT
}

enum MessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
}
